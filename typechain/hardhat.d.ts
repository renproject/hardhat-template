/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlEnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerableUpgradeable__factory>;
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlEnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerableUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "ERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Upgradeable__factory>;
    getContractFactory(
      name: "IERC20MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "IERC1822Proxiable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822Proxiable__factory>;
    getContractFactory(
      name: "IERC1271",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1271__factory>;
    getContractFactory(
      name: "BeaconProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BeaconProxy__factory>;
    getContractFactory(
      name: "IBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeacon__factory>;
    getContractFactory(
      name: "UpgradeableBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UpgradeableBeacon__factory>;
    getContractFactory(
      name: "ERC1967Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Proxy__factory>;
    getContractFactory(
      name: "ERC1967Upgrade",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967Upgrade__factory>;
    getContractFactory(
      name: "Proxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Proxy__factory>;
    getContractFactory(
      name: "TransparentUpgradeableProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransparentUpgradeableProxy__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "BasicBridge",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BasicBridge__factory>;
    getContractFactory(
      name: "GatewayRegistryGettersV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GatewayRegistryGettersV2__factory>;
    getContractFactory(
      name: "GatewayRegistryProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GatewayRegistryProxy__factory>;
    getContractFactory(
      name: "GatewayRegistryV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GatewayRegistryV2__factory>;
    getContractFactory(
      name: "IGatewayRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IGatewayRegistry__factory>;
    getContractFactory(
      name: "LockGatewayProxyBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LockGatewayProxyBeacon__factory>;
    getContractFactory(
      name: "MintGatewayProxyBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintGatewayProxyBeacon__factory>;
    getContractFactory(
      name: "ProxyBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ProxyBeacon__factory>;
    getContractFactory(
      name: "RenAssetProxyBeacon",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RenAssetProxyBeacon__factory>;
    getContractFactory(
      name: "RenAssetFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RenAssetFactory__factory>;
    getContractFactory(
      name: "GatewayStateManagerV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.GatewayStateManagerV3__factory>;
    getContractFactory(
      name: "ILockGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILockGateway__factory>;
    getContractFactory(
      name: "IMintGateway",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMintGateway__factory>;
    getContractFactory(
      name: "LockGatewayV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LockGatewayV3__factory>;
    getContractFactory(
      name: "MintGatewayV3",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MintGatewayV3__factory>;
    getContractFactory(
      name: "IRenVMSignatureVerifier",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IRenVMSignatureVerifier__factory>;
    getContractFactory(
      name: "RenVMSignatureVerifierProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RenVMSignatureVerifierProxy__factory>;
    getContractFactory(
      name: "RenVMSignatureVerifierV1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RenVMSignatureVerifierV1__factory>;
    getContractFactory(
      name: "ERC20WithPermit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20WithPermit__factory>;
    getContractFactory(
      name: "RenAssetV2",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RenAssetV2__factory>;
    getContractFactory(
      name: "TestToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TestToken__factory>;
    getContractFactory(
      name: "TransferWithLog",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TransferWithLog__factory>;
    getContractFactory(
      name: "Adapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Adapter__factory>;
    getContractFactory(
      name: "BridgeExample",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BridgeExample__factory>;

    getContractAt(
      name: "AccessControlEnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerableUpgradeable>;
    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlEnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerableUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "ERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Upgradeable>;
    getContractAt(
      name: "IERC20MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20MetadataUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "IERC1822Proxiable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822Proxiable>;
    getContractAt(
      name: "IERC1271",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1271>;
    getContractAt(
      name: "BeaconProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BeaconProxy>;
    getContractAt(
      name: "IBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeacon>;
    getContractAt(
      name: "UpgradeableBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UpgradeableBeacon>;
    getContractAt(
      name: "ERC1967Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Proxy>;
    getContractAt(
      name: "ERC1967Upgrade",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967Upgrade>;
    getContractAt(
      name: "Proxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Proxy>;
    getContractAt(
      name: "TransparentUpgradeableProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransparentUpgradeableProxy>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "BasicBridge",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BasicBridge>;
    getContractAt(
      name: "GatewayRegistryGettersV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GatewayRegistryGettersV2>;
    getContractAt(
      name: "GatewayRegistryProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GatewayRegistryProxy>;
    getContractAt(
      name: "GatewayRegistryV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GatewayRegistryV2>;
    getContractAt(
      name: "IGatewayRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IGatewayRegistry>;
    getContractAt(
      name: "LockGatewayProxyBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LockGatewayProxyBeacon>;
    getContractAt(
      name: "MintGatewayProxyBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MintGatewayProxyBeacon>;
    getContractAt(
      name: "ProxyBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ProxyBeacon>;
    getContractAt(
      name: "RenAssetProxyBeacon",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RenAssetProxyBeacon>;
    getContractAt(
      name: "RenAssetFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RenAssetFactory>;
    getContractAt(
      name: "GatewayStateManagerV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.GatewayStateManagerV3>;
    getContractAt(
      name: "ILockGateway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILockGateway>;
    getContractAt(
      name: "IMintGateway",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMintGateway>;
    getContractAt(
      name: "LockGatewayV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LockGatewayV3>;
    getContractAt(
      name: "MintGatewayV3",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MintGatewayV3>;
    getContractAt(
      name: "IRenVMSignatureVerifier",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IRenVMSignatureVerifier>;
    getContractAt(
      name: "RenVMSignatureVerifierProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RenVMSignatureVerifierProxy>;
    getContractAt(
      name: "RenVMSignatureVerifierV1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RenVMSignatureVerifierV1>;
    getContractAt(
      name: "ERC20WithPermit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20WithPermit>;
    getContractAt(
      name: "RenAssetV2",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RenAssetV2>;
    getContractAt(
      name: "TestToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TestToken>;
    getContractAt(
      name: "TransferWithLog",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TransferWithLog>;
    getContractAt(
      name: "Adapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Adapter>;
    getContractAt(
      name: "BridgeExample",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BridgeExample>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
